- Class: meta
  Course: The R Programming Environment
  Lesson: Data Manipulation
  Author: Brooke Anderson, Sean Kross, Roger Peng
  Type: Standard
  Organization: Colorado State University, Johns Hopkins Bloomberg School of Public Health
  Version: 2.4.2

- Class: script
  Output: I just opened an R script for you, and I have loaded a 
    dataset called `worldcup`. For this question, you will be adding a 
    function from `dplyr` or `tidyr` to the pipe chain in the script.
    Your goal is to re-create the example output shown in the 
    comments of the script. When you are ready to submit your script,
    save the script and type `submit()`, or type `reset()` to reset 
    the script to its original state.
  AnswerTests: script_results_identical('wc_1')
  Hint: Check the example output in the comments of the script I 
    opened for you. Make sure you are selecting just the four 
    columns shown in this example output. Try running your code in 
    the console and printing out the result to determine whether 
    it's successfully generating the desired final data 
    frame before you submit it.
  Script: step_1_wc.R
  
- Class: script
  Output: In this question, you will continue to build on the data 
    cleaning you started in  the last question. I opened a new R 
    script for you with the previous question completed. As a next 
    step, you now need to reduce the data frame to show the mean of
    each column selected in the previous step. To do this, add a 
    function from `dplyr` or `tidyr` to the pipe chain in the script.
    Your goal is to re-create the example output shown in the 
    comments of the script. When you are ready to submit your script,
    save the script and type `submit()`, or type `reset()` to reset 
    the script to its original state.
  AnswerTests: script_results_identical('wc_2')
  Hint: Check the example output in the comments of the script I 
    opened for you. Make sure you are summarizing all four 
    columns shown in this example output, and that your final output
    is still in a data frame rather than a vector. Try running your 
    code in the console and printing out the result to determine 
    whether it's successfully generating the desired final data 
    frame before you submit it.
  Script: step_2_wc.R
  
- Class: script
  Output: In this question, you will again continue to build on the 
    data cleaning you started in the last two questions. I opened a
    new R script for you with the previous steps completed. As a next 
    step, you now need to rearrange the data frame to have one column
    with each variable's name and one column with mean values for 
    each variable. To do this, add a function from `dplyr` or `tidyr`
    to the pipe chain in the script. Your goal is to re-create the 
    example output shown in the comments of the script. When you are 
    ready to submit your script, save the script and type `submit()`,
    or type `reset()` to reset the script to its original state.
  AnswerTests: script_results_identical('wc_3')
  Hint: Check the example output in the comments of the script I 
    opened for you. Make sure you are rearranging the data frame so 
    that column names are converted into their own column. Try running 
    your code in the console and printing out the result to determine 
    whether it's successfully generating the desired final data 
    frame before you submit it.
  Script: step_3_wc.R
  
- Class: script
  Output: In this question, you will continue to build on the 
    data cleaning in the last three questions. I opened a
    new R script for you with the previous steps completed. As a next 
    step, you now round the mean values to one decimal point.
    To do this, add a function from `dplyr` or `tidyr`
    to the pipe chain in the script. Your goal is to re-create the 
    example output shown in the comments of the script. When you are 
    ready to submit your script, save the script and type `submit()`,
    or type `reset()` to reset the script to its original state.
  AnswerTests: script_results_identical('wc_4')
  Hint: Check the example output in the comments of the script I 
    opened for you. You may find the `round` function useful. 
    Try running your code in the console and printing out the result 
    to determine whether it's successfully generating the desired 
    final data frame before you submit it.
  Script: step_4_wc.R
  
- Class: script
  Output: In this question, we'll be doing similar data cleaning with 
    a new dataset. I have loaded a dataset called `titanic` for you. 
    For this question, you need to subset the original dataframe
    down to four columns. Your goal is to re-create the example 
    output shown in the comments of the script by adding a `dplyr` or
    `tidyr` function to the pipe chain.  When you are ready to 
    submit your script, save the script and type `submit()`, or 
    type `reset()` to reset the script to its original state. 
  AnswerTests: script_results_identical('titanic_1')
  Hint: Check the example output in the comments of the script I 
    opened for you. Make sure you are selecting just the four 
    columns shown in this example output. Try running your code in 
    the console and printing out the result to determine whether 
    it's successfully generating the desired final data 
    frame before you submit it.
  Script: step_1_titanic.R
  
- Class: script
  Output: In this question, you will continue to build on the data 
    cleaning you started in  the last question. I opened a new R 
    script for you with the previous question completed. As a next 
    step, you now need to remove any observations that are missing 
    a value for Age. To do this, add a 
    function from `dplyr` or `tidyr` to the pipe chain in the script.
    Your goal is to re-create the example output shown in the 
    comments of the script. When you are ready to submit your script,
    save the script and type `submit()`, or type `reset()` to reset 
    the script to its original state.
  AnswerTests: script_results_identical('titanic_2')
  Hint: Check the example output in the comments of the script I 
    opened for you. Make sure you are filtering down to just those 
    observations where the Age variable is not NA. Try running your 
    code in the console and printing out the result to determine 
    whether it's successfully generating the desired final data 
    frame before you submit it.
  Script: step_2_titanic.R

- Class: script
  Output: In this question, you will again continue to build on the 
    data cleaning you started in the last two questions. I opened a
    new R script for you with the previous steps completed. As a next 
    step, you now need to create a new column called agecat that
    divides a person's age into three broad categories (Under 15,
    15 to 50, Over 50). To do this, add a function from `dplyr` or 
    `tidyr` to the pipe chain in the script. Your goal is to 
    re-create the example output shown in the comments of the script.
    When you are ready to submit your script, save the script and 
    type `submit()`, or type `reset()` to reset the script to its 
    original state.
  AnswerTests: script_results_identical('titanic_3')
  Hint: Check the example output in the comments of the script I 
    opened for you. The `cut` function is useful for this question--
    be sure to check its help file. Make sure you understand how 
    `cut` handles ages right at the cutpoints (e.g., 15 and 50). 
    Try running your code in the console and printing out the result
    to determine whether it's successfully generating the desired 
    final data frame before you submit it.
  Script: step_3_titanic.R
  
- Class: script
  Output: In this question, you will continue to build on the 
    data cleaning you from the last three questions. I opened a
    new R script for you with the previous steps completed. As a next 
    step, you now need to generate a data frame with the number of
    passengers, number of survivors, and percent survival stratified
    by passenger class, age category, and sex. 
    To do this, add one or more functions from `dplyr` or 
    `tidyr` to the pipe chain in the script. Your goal is to 
    re-create the example output shown in the comments of the script.
    When you are ready to submit your script, save the script and 
    type `submit()`, or type `reset()` to reset the script to its 
    original state.
  AnswerTests: script_results_data3('titanic_4','titanic_4.rds','titanic_4_a.rds','titanic_4_b.rds', round_numeric_columns = TRUE)
  Hint: Check the example output in the comments of the script I 
    opened for you. Make sure the columns in your output are in the
    same order as shown in the example output in the script comments.
    Try running your code in the console and printing out the result
    to determine whether it's successfully generating the desired 
    final data frame before you submit it.
  Script: step_4_titanic.R

- Class: mult_question
  Output: "Would you like to receive credit for completing this course on
    Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No;Generate Code
  AnswerTests: coursera_on_demand()
  Hint: ""


